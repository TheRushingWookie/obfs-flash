#!/usr/bin/env python

# Usage: Put this in torrc:
# ServerTransportPlugin obfs3_websocket exec /usr/local/bin/obfs-flash-server

import getopt
import os
import signal
import subprocess
import sys

import pyptlib.config
import pyptlib.server
import pyptlib.util

PT_METHOD_NAME = "obfs3_websocket"

WEBSOCKET_SERVER = "websocket-server"
OBFSPROXY = "obfsproxy"

def usage(f=sys.stdout):
    print >> f, """\
Usage: %(progname)s [OPTIONS]
Chains websocket-server and obfsproxy transports. websocket-server and
obfsproxy must be in PATH.

  -h, --help          show this help.
  -l, --log FILENAME  log to FILENAME (default stderr).\
""" % {"progname": sys.argv[0]}

class options(object):
    log_filename = None
    log_file = sys.stderr

def log(msg):
    print >> options.log_file, msg
    options.log_file.flush()

opts, args = getopt.gnu_getopt(sys.argv[1:], "hl:", ["help", "log="])
for o, a in opts:
    if o == "-h" or o == "--help":
        usage()
        sys.exit()
    elif o == "-l" or o == "--log":
        options.log_filename = a

if len(args) != 0:
    usage(sys.stderr)
    sys.exit(1)
if options.log_filename is not None:
    try:
        options.log_file = open(options.log_filename, "a")
        sys.stderr = options.log_file
    except IOError, e:
        print >> sys.stderr, "can't open log file: %s." % e
        sys.exit(1)

if pyptlib.util.checkClientMode():
    log("obfs-flash-server works only as a server, not a client.")
    sys.exit(1)

try:
    info = pyptlib.server.init([PT_METHOD_NAME])
except pyptlib.config.EnvError, e:
    log("pyptlib.server.init: %s." % e)
    sys.exit(1)
log("server info: %s." % info)

if info["transports"].keys() != [PT_METHOD_NAME]:
    log("We were asked to start no transports.")
    pyptlib.server.reportEnd()
    sys.exit()

bindaddr = info["transports"][PT_METHOD_NAME]
# mid_bindaddr and external_bindaddr are learned through transport negotiation.
mid_bindaddr = None
external_bindaddr = None
procs = []

# obfsproxy talks directly to the real ORPort and listens on mid_bindaddr.
env = {
    "TOR_PT_MANAGED_TRANSPORT_VER": "1",
    "TOR_PT_STATE_LOCATION": os.environ.get("TOR_PT_STATE_LOCATION"),
    "TOR_PT_EXTENDED_SERVER_PORT": "",
    "TOR_PT_ORPORT": os.environ.get("TOR_PT_ORPORT"),
    "TOR_PT_SERVER_TRANSPORTS": "obfs3",
    "TOR_PT_SERVER_BINDADDR": "obfs3-127.0.0.1:0",
    "PATH": os.environ.get("PATH"),
}
log("obfsproxy environment: %r." % env)
try:
    proc = subprocess.Popen([OBFSPROXY, "managed"], stdout=subprocess.PIPE, env=env)
    procs.append(proc)
except Exception, e:
    log("Failed to start obfsproxy: %s." % e)
    pyptlib.server.reportFailure(PT_METHOD_NAME, "%s" % e)
    sys.exit(1)
while True:
    line = proc.stdout.readline()
    log("received from obfsproxy: %r." % line)
    keyword, rest = line.strip().split(None, 1)
    if keyword == "SMETHOD":
        # This is the address that the transport ended up listening on.
        args = rest.split()
        if len(args) == 2 and args[0] == "obfs3":
            mid_bindaddr = pyptlib.util.parse_addr_spec(args[1])
    elif (keyword, rest) == ("SMETHODS", "DONE"):
        break

if mid_bindaddr is None:
    log("No obfsproxy SMETHOD found.")
    pyptlib.server.reportFailure(PT_METHOD_NAME, "No obfsproxy SMETHOD found")
    sys.exit(1)

# websocket-server talks to mid_bindaddr and listens on bindaddr.
env = {
    "TOR_PT_MANAGED_TRANSPORT_VER": "1",
    "TOR_PT_STATE_LOCATION": os.environ.get("TOR_PT_STATE_LOCATION"),
    "TOR_PT_ORPORT": "%s:%d" % mid_bindaddr,
    "TOR_PT_SERVER_TRANSPORTS": "websocket",
    "TOR_PT_SERVER_BINDADDR": "websocket-%s:%d" % bindaddr,
    "PATH": os.environ.get("PATH"),
}
log("websocket-server environment: %r" % env)
try:
    proc = subprocess.Popen([WEBSOCKET_SERVER], stdout=subprocess.PIPE, env=env)
    procs.append(proc)
except Exception, e:
    log("Failed to start websocket-server: %s." % e)
    pyptlib.server.reportFailure(PT_METHOD_NAME, "%s" % e)
    sys.exit(1)
while True:
    line = proc.stdout.readline()
    log("received from websocket-server: %r." % line)
    keyword, rest = line.strip().split(None, 1)
    if keyword == "SMETHOD":
        # This is the address that the transport ended up listening on.
        args = rest.split()
        if len(args) == 2 and args[0] == "websocket":
            external_bindaddr = pyptlib.util.parse_addr_spec(args[1])
    elif (keyword, rest) == ("SMETHODS", "DONE"):
        break

if external_bindaddr is None:
    log("No websocket-server SMETHOD found.")
    pyptlib.server.reportFailure(PT_METHOD_NAME, "No websocket-server SMETHOD found")
    sys.exit(1)

pyptlib.server.reportSuccess(PT_METHOD_NAME, external_bindaddr, None)

sigint = False
def sigint_handler(*args):
    global sigint
    sigint = True
signal.signal(signal.SIGINT, sigint_handler)

sigint = False
while not sigint:
    signal.pause()
log("SIGINT 1")
for proc in procs:
    proc.send_signal(signal.SIGINT)

sigint = False
while not sigint:
    signal.pause()
log("SIGINT 2")
for proc in procs:
    proc.send_signal(signal.SIGINT)
